/*
 * This file is generated by jOOQ.
 */
package neacron_2fjooq.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import neacron_2fjooq.Keys;
import neacron_2fjooq.Public;
import neacron_2fjooq.tables.records.LogsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Logs extends TableImpl<LogsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.logs</code>
     */
    public static final Logs LOGS = new Logs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogsRecord> getRecordType() {
        return LogsRecord.class;
    }

    /**
     * The column <code>public.logs.id</code>.
     */
    public final TableField<LogsRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.logs.created_at</code>.
     */
    public final TableField<LogsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.logs.language</code>.
     */
    public final TableField<LogsRecord, String> LANGUAGE = createField(DSL.name("language"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.logs.protocol</code>.
     */
    public final TableField<LogsRecord, String> PROTOCOL = createField(DSL.name("protocol"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.logs.request</code>.
     */
    public final TableField<LogsRecord, String> REQUEST = createField(DSL.name("request"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.logs.status_code</code>.
     */
    public final TableField<LogsRecord, Integer> STATUS_CODE = createField(DSL.name("status_code"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.logs.user_principal</code>.
     */
    public final TableField<LogsRecord, String> USER_PRINCIPAL = createField(DSL.name("user_principal"), SQLDataType.VARCHAR(255), this, "");

    private Logs(Name alias, Table<LogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Logs(Name alias, Table<LogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.logs</code> table reference
     */
    public Logs(String alias) {
        this(DSL.name(alias), LOGS);
    }

    /**
     * Create an aliased <code>public.logs</code> table reference
     */
    public Logs(Name alias) {
        this(alias, LOGS);
    }

    /**
     * Create a <code>public.logs</code> table reference
     */
    public Logs() {
        this(DSL.name("logs"), null);
    }

    public <O extends Record> Logs(Table<O> child, ForeignKey<O, LogsRecord> key) {
        super(child, key, LOGS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<LogsRecord, Long> getIdentity() {
        return (Identity<LogsRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<LogsRecord> getPrimaryKey() {
        return Keys.LOGS_PKEY;
    }

    @Override
    public Logs as(String alias) {
        return new Logs(DSL.name(alias), this);
    }

    @Override
    public Logs as(Name alias) {
        return new Logs(alias, this);
    }

    @Override
    public Logs as(Table<?> alias) {
        return new Logs(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(String name) {
        return new Logs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(Name name) {
        return new Logs(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(Table<?> name) {
        return new Logs(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, LocalDateTime, String, String, String, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Long, ? super LocalDateTime, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
