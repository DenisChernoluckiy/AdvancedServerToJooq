/*
 * This file is generated by jOOQ.
 */
package neacron_2fjooq;


import neacron_2fjooq.tables.Logs;
import neacron_2fjooq.tables.News;
import neacron_2fjooq.tables.Tags;
import neacron_2fjooq.tables.Todo;
import neacron_2fjooq.tables.Users;
import neacron_2fjooq.tables.records.LogsRecord;
import neacron_2fjooq.tables.records.NewsRecord;
import neacron_2fjooq.tables.records.TagsRecord;
import neacron_2fjooq.tables.records.TodoRecord;
import neacron_2fjooq.tables.records.UsersRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in
 * public.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<LogsRecord> LOGS_PKEY = Internal.createUniqueKey(Logs.LOGS, DSL.name("logs_pkey"), new TableField[] { Logs.LOGS.ID }, true);
    public static final UniqueKey<NewsRecord> NEWS_PKEY = Internal.createUniqueKey(News.NEWS, DSL.name("news_pkey"), new TableField[] { News.NEWS.ID }, true);
    public static final UniqueKey<TagsRecord> TAGS_PKEY = Internal.createUniqueKey(Tags.TAGS, DSL.name("tags_pkey"), new TableField[] { Tags.TAGS.ID }, true);
    public static final UniqueKey<TodoRecord> TODO_PKEY = Internal.createUniqueKey(Todo.TODO, DSL.name("todo_pkey"), new TableField[] { Todo.TODO.ID }, true);
    public static final UniqueKey<UsersRecord> USERS_PKEY = Internal.createUniqueKey(Users.USERS, DSL.name("users_pkey"), new TableField[] { Users.USERS.ID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<NewsRecord, UsersRecord> NEWS__FKI09N75TXTUDW1KAWJ5O7I8XAG = Internal.createForeignKey(News.NEWS, DSL.name("fki09n75txtudw1kawj5o7i8xag"), new TableField[] { News.NEWS.USER_ID }, Keys.USERS_PKEY, new TableField[] { Users.USERS.ID }, true);
    public static final ForeignKey<TagsRecord, NewsRecord> TAGS__FK53NVUALSTHQ4IJ10AD2XFSI01 = Internal.createForeignKey(Tags.TAGS, DSL.name("fk53nvualsthq4ij10ad2xfsi01"), new TableField[] { Tags.TAGS.NEWS_ID }, Keys.NEWS_PKEY, new TableField[] { News.NEWS.ID }, true);
}
